## If true, a nil or {} value for prometheus.prometheusSpec.serviceMonitorSelector will cause the
## prometheus resource to be created with selectors based on values in the helm deployment,
## which will also match the servicemonitors created
##
prometheus:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts: [ 'prometheus.localhost' ]
    paths: [ "/" ]
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: { }
    serviceMonitorNamespaceSelector: { }
    enableRemoteWriteReceiver: true
    enableFeatures:
      - remote-write-receiver

grafana:
  enabled: true
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts: [ 'grafana.localhost' ]
    path: "/"

  sidecar:
    datasources:
      defaultDatasourceEnabled: true
      exemplarTraceIdDestinations:
        datasourceUid: tempo
        traceIdLabelName: TraceID
  additionalDataSources:
    - name: Loki
      type: loki
      url: http://loki-distributed-query-frontend.monitoring.svc.cluster.local:3100
      access: proxy
      jsonData:
        manageAlerts: true
        derivedFields:
          - datasourceUid: tempo
            matcherRegex: "traceID=(\\w+)"
            name: TraceID
            url: $${__value.raw}
        maxLines: 1000
        version: 1
    - name: Tempo
      type: tempo
      uid: tempo
      url: http://tempo-distributed-query-frontend.monitoring.svc.cluster.local:3100
      access: proxy
      version: 1
      jsonData:
        httpMethod: GET
        tracesToLogs:
          datasourceUid: Loki
          tags: [ 'job', 'instance', 'pod', 'namespace' ]
          mappedTags: [ { key: 'service.name', value: 'service' } ]
          mapTagNamesEnabled: false
          spanStartTimeShift: '1h'
          spanEndTimeShift: '1h'
          filterByTraceID: false
          filterBySpanID: false
        tracesToMetrics:
          datasourceUid: 'prometheus'
          tags: [ { key: 'service.name', value: "service" }, { key: 'name', value: "span_name" } ]
          queries:
            - name: '95th Percentile'
              query: 'histogram_quantile(0.95, sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[$$__rate_interval])) by (le))'
        serviceMap:
          datasourceUid: 'prometheus'
        search:
          hide: false
        nodeGraph:
          enabled: true
        lokiSearch:
          datasourceUid: Loki
  grafana.ini:
    feature_toggles:
      enable: tempoSearch tempoBackendSearch tempoApmTable
    users:
      viewers_can_edit: true
    auth:
      disable_login_form: true
      disable_signout_menu: true
    auth.anonymous:
      enabled: true
      org_role: Admin
prometheus-node-exporter:
  hostRootFsMount:
    enabled: false
